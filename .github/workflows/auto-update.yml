name: Auto-update FRC packages

on:
  schedule:
    # Run daily at 6 AM EST (11 AM UTC)
    - cron: "0 11 * * *"
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  update-packages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Check for package updates
        id: check-updates
        run: |
          echo "Checking for package updates..."

          # Run the update tool and capture output
          if nix run .#frc-nix-update -- --dry-run > update_output.txt 2>&1; then
            echo "Update check completed successfully"
          else
            echo "Update check failed"
            cat update_output.txt
            exit 1
          fi

          # Check if any packages need updates
          if grep -q "All packages are up to date" update_output.txt; then
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "No package updates available"
          else
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Package updates available"
          fi

          # Extract updated packages for PR description
          if grep -q "Updated packages:" update_output.txt; then
          updated_packages=$(grep "Updated packages:" update_output.txt | sed 's/==> Updated packages: //' | xargs -n1 | sed 's/^/- /')
          echo "updated_packages<<EOF" >> $GITHUB_OUTPUT
          echo "$updated_packages" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

            version_changes=$(
              grep " -> " update_output.txt | sed 's/^  //' | while IFS=': ' read -r package versions; do
                old_ver=$(echo "$versions" | cut -d' ' -f1)
                new_ver=$(echo "$versions" | cut -d' ' -f3)
                case "$package" in
                  advantagescope)
                    echo "- $package: \`$old_ver\` -> [\`$new_ver\`](https://github.com/Mechanical-Advantage/AdvantageScope/releases/tag/v$new_ver)"
                    ;;
                  choreo)
                    echo "- $package: \`$old_ver\` -> [\`$new_ver\`](https://github.com/SleipnirGroup/Choreo/releases/tag/v$new_ver)"
                    ;;
                  elastic-dashboard)
                    echo "- $package: \`$old_ver\` -> [\`$new_ver\`](https://github.com/Gold872/elastic-dashboard/releases/tag/v$new_ver)"
                    ;;
                  pathplanner)
                    echo "- $package: \`$old_ver\` -> [\`$new_ver\`](https://github.com/mjansen4857/pathplanner/releases/tag/v$new_ver)"
                    ;;
                  *)
                    echo "- $package: \`$old_ver\` -> \`$new_ver\`"
                    ;;
                esac
              done
            )
            echo "version_changes<<EOF" >> $GITHUB_OUTPUT
            echo "$version_changes" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Apply package updates
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          echo "Applying package updates..."

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Run the actual update (without dry-run)
          nix run .#frc-nix-update

          # Update nixpkgs to the latest unstable since packages were updated
          echo "Updating nixpkgs to latest unstable..."
          nix flake update nixpkgs

          # Verify the updates worked
          echo "Verifying updates with nix flake check..."
          if ! nix flake check; then
            echo "‚ùå Flake check failed after updates"
            exit 1
          fi

          echo "‚úÖ Updates applied and verified successfully"

      - name: Create Pull Request
        if: steps.check-updates.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update FRC packages and nixpkgs

            Auto-updated packages: ${{ steps.check-updates.outputs.updated_packages }}
            Also updated nixpkgs to latest unstable.

            ü§ñ Generated with frc-nix-update
            Co-Authored-By: ü§ñ GitHub Actions <action@github.com>
          title: "chore: update FRC packages and nixpkgs to latest versions"
          body: |
            ## ü§ñ Automated Package Updates

            This PR updates the following packages to their latest available versions, and bumps nixpkgs to the latest unstable.

            ${{ steps.check-updates.outputs.version_changes }}

            ### Review Notes
            The checks have done a preliminary pass to make sure the packages build but functionality still needs to be tested manually.

              ---
            ü§ñ Generated by [`frc-nix-update`](https://github.com/frc4451/frc-nix)
          branch: auto-update-packages
          delete-branch: true
          draft: false
          reviewers: |
            # Add maintainer usernames here:
            taciturnaxolotl
          author: GitHub Action <action@github.com>

      - name: Upload update log
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: update-log
            path: update_output.txt
            retention-days: 7
